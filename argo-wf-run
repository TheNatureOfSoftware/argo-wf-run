#!/usr/bin/env bash

REPO_URL='https://github.com/TheNatureOfSoftware/argo-wf-run'
APP_NAME='argo-wf-run'
VERSION=${VERSION:-v0.3}
AWR_WF_SERVICE="localhost"
AWR_WF_PARAMETERS=""

declare -a AWR_WF_ARGO_ARGS

function help () {
  cat << EOF
argo-wf-run runs an Argo workflow from the command line

Usage:
  argo-wf-run                        starts a shell for running workflows with argo cli
  argo-wf-run (-f|--filename) FILE   runs argo submit with a single workflow

Flags:
  -f|--filename                      Argo workflow file to run
  -v|--volume                        Bind mount a volume
  -d|--directory                     Write workflow output to directory
  -s|--service                       The hostname where to find k3s
  -p|--parameter                     Pass an input parameter
  --parameter-file                   Pass a file containing all input parameters
  -w|--wait                          Wait for the workflow to complete

Example:
  $ argo-wf-run -f https://raw.githubusercontent.com/argoproj/argo/master/examples/dag-diamond-steps.yaml
EOF
}

# Thanks to https://gist.github.com/cdown/1163649
urlencode() {
  # urlencode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C
  
  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
      local c="${1:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "$c" ;;
          *) printf '%%%02X' "'$c" ;;
      esac
  done
  
  LC_COLLATE=$old_lc_collate
}

urldecode() {
  # urldecode <string>

  local url_encoded="${1//+/ }"
  printf '%b' "${url_encoded//%/\\x}"
}

cleanUp() {
  set +u
  if [[ -n "${AWR_CONTAINER_ID}" ]]; then
    echo "Removing container ${AWR_CONTAINER_ID}"
    docker rm -f ${AWR_CONTAINER_ID} &> /dev/null
  fi
}

onError() {
  result=$?
  if [ "$result" != "0" ]; then
    echo -e "Failed to run $APP_NAME with the arguments provided: $@\n"
    echo -e "\n\tFor help, go to $REPO_URL.\n"
  fi
  cleanUp
  exit $result
}

workDir() {
  IFS=':' read -ra PARTS <<< "${AWR_WF_VOLUME}"
  echo -n ${PARTS[1]}
}

function is_local_file () {
  [[ "$( echo "${AWR_WF_FILE}" | grep 'http' )" == "" ]]
}

function append_parameter() {
  if [[ "${AWR_WF_PARAMETERS}" == "" ]]; then
    AWR_WF_PARAMETERS="${1}: "${@:2}""
  else
    AWR_WF_PARAMETERS="${AWR_WF_PARAMETERS}\n${1}: "${@:2}""
  fi
}

function volumes() {
  if [[ -n "${AWR_WF_ARTIFACTS}" ]]; then
    echo -n "-v ${AWR_WF_ARTIFACTS}:/argo-wf-artifacts -v $AWR_WF_VOLUME"
  else
    echo -n "-v $AWR_WF_VOLUME"
  fi
}

startContainer() {
  AWR_WF_VOLUME=${AWR_WF_VOLUME:-$PWD:/work}
  AWR_CONTAINER_ID=$(docker run -d \
-e DOCKER_HOST=tcp://127.0.0.1:2375 \
-e AWR_WF_SERVICE=${AWR_WF_SERVICE} \
-e NO_WAIT_BEFORE_WATCH=true \
$(volumes) \
--entrypoint=dockerd \
--privileged thenatureofsoftware/argo-wf-run:$VERSION --host=tcp://0.0.0.0:2375)
}

startShell() {
  docker exec -it -e START_SHELL=true -w $(workDir) ${AWR_CONTAINER_ID} bash --rcfile "/argo-wf/scripts/start-k3s.sh"
}

runWorkflow() {
  if is_local_file; then
    wf_file="/$(basename ${AWR_WF_FILE})"
    if [[ ! -f ${AWR_WF_FILE} ]]; then
      echo "file not found"
      exit 1
    fi
    docker cp ${AWR_WF_FILE} ${AWR_CONTAINER_ID}:${wf_file}
  else
    wf_file="${AWR_WF_FILE}"
  fi
  docker exec -it \
  -e AWR_WF_PARAMETERS=$(urlencode "${AWR_WF_PARAMETERS}") \
  -w $(workDir) ${AWR_CONTAINER_ID} bash -x -c "/argo-wf/scripts/run-argo-wf.sh ${wf_file} ${AWR_WF_ARGO_ARGS[@]}"
}

###############################################################################
# Main
###############################################################################

# Stop execution on any error
trap "onError" EXIT
set -e

# Replace GNU-style long options so that we can use getopts
declare -a args
for arg in "$@"; do
  case "$arg" in
    '--filename')
      args+=('-f')
      ;;
    '--volume')
      args+=('-v')
      ;;
    '--directory')
      args+=('-d')
      ;;
    '--service')
      args+=('-s')
      ;;
    '--parameter'|-p)
      #args+=('-p')
      ;;
    '--parameter-file')
      #args+=('-P')
      ;;
    *)
      if [[ "$prev_arg" == "--parameter" ]] || [[ "$prev_arg" == "-p" ]]; then
        parr=($(echo "$arg" | awk '{split($0,a,"="); print a[1],a[2]}'))
        append_parameter "${parr[0]}" "${parr[@]:1}"
      elif [[ "$prev_arg" == "--parameter-file" ]]; then
        if [[ ! -f ${arg} ]]; then
          echo "Parameter file not found!"
          exit 1
        fi
        while read param; do
          parr=($(echo "$param" | awk '{split($0,a,":"); print a[1],a[2]}'))
          append_parameter "${parr[0]}" "$(echo -n ${parr[@]:1} | sed -e 's/^[[:space:]]*//')"
        done <${arg}
      else
        args+=("$arg")
      fi
      ;;
  esac
  prev_arg="$arg"
done

set -u
while getopts ":f:v:d:s:p:P:wh" opt ${args[@]}; do
  case $opt in
    '--filename'|f)
      AWR_WF_FILE="${OPTARG}"
      ;;
    '--volume'|v)
      AWR_WF_VOLUME="${OPTARG}"
      ;;
    '--directory'|d)
      AWR_WF_ARTIFACTS="$(cd ${OPTARG} && pwd)"
      ;;
    '--service'|s)
      AWR_WF_SERVICE=${OPTARG}
      ;;
    '--wait'|w)
      AWR_WF_ARGO_ARGS+=("-$opt")
      ;;
    '--help'|h)
      help
      exit 0
      ;;
    *) exit 1
      ;;
  esac
  shift
done
set +u

startContainer
if [[ -z "${AWR_WF_FILE}" ]]; then
  startShell
else
  runWorkflow
fi
